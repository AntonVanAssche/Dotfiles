#!/usr/bin/env bash

prompt_git() {
    local s='';
    local branch_name='';

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')"


    repo_url="$(git config --get remote.origin.url)"
    if grep -q 'chromium/src.git' <<< "${repo_url}"; then
        s+='*';
    else
        # Check for uncommitted changes in the index.
        ! eval git diff --quiet --ignore-submodules --cached && \
            s+='+'

        # Check for unstaged changes.
        ! eval git diff-files --quiet --ignore-submodules -- && \
            s+='!'

        # Check for untracked files.
        test -n "$(git ls-files --others --exclude-standard)" && \
            s+='?'

        # Check for stashed files.
        eval git rev-parse --verify refs/stash &>/dev/null && \
            s+='$'
    fi

    [[ -n "${s}" ]] && s=" [${s}]"

    echo -e "${1}${branch_name}${2}${s}"
}

PS1="\n"; # Inserts a blank line between shell prompts.
PS1+="\[\e[95m\]  "; # Pacman symbol.
PS1+="\W"; # Display current working directory (directory name only).
PS1+="\$(prompt_git \"\[\e[37m\] on \[\e[95m\]\" \"\[\e[94m\]\")"; # Git repository details.
PS1+=" \[\e[92m\]❯\[\e[94m\]❯\[\e[93m\]❯\[\e[0m\]  " || PS1="$ " # When PS1 is not set, use '$ ' as the prompt symbol.
                                                                 # This is especially useful when running older versions of bash.
                                                                 # Which I regularly do, to test compatibility with older systems.
export PS1;

PS2+=" \[\e[92m\]❯\[\e[94m\]❯\[\e[93m\]❯\[\e[0m\]  " || PS2="> " # When PS2 is not set, use '> ' as the prompt symbol.
export PS2;
