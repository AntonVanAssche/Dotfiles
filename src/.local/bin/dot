#!/bin/bash

# Repo info
declare -r GITHUB_REPOSITORY="AntonVanAssche/dotfiles"
declare -r GITHUB_REPOSITORY_URL="https://github.com/$GITHUB_REPOSITORY"

# Script info
declare -r SCRIPT_NAME="${0}"

# Colors
declare normal="$(tput sgr0 2> /dev/null)"
declare red="$(tput setaf 1 2> /dev/null)"
declare green="$(tput setaf 2 2> /dev/null)"
declare yellow="$(tput setaf 3 2> /dev/null)"
declare blue="$(tput setaf 4 2> /dev/null)"

Header() {
cat << "EOF"

                              █▀▀▀ ▀█▀ █    █▀▀ █▀▀
                              █▀▀   █  █    █▀▀ ▀▀█
                            ▀ ▀    ▀▀▀ ▀▀▀  ▀▀▀ ▀▀▀
EOF
}

# Ask for the administrator password upfront.
AskForSudo() {
    sudo -v -p "    [?] Enter Your password to continue: "
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &
}

# Colors
PrintResult() {
    if [ "$1" -eq 0 ]; then
        PrintSuccess "$2"
    else
        PrintError "$2"
    fi

    return "$1"
}

PrintSuccess() {
    printf "%b" "    [${green}✔${normal}] $1\n"
}

PrintWarning() {
    printf "%b" "    [${yellow}!${normal}] $1\n"
}

PrintError() {
    printf "%b" "    [${red}✖${normal}] $1 $2\n"
}

KillAllSubprocesses() {
    local i=""

    for i in $(jobs -p); do
        kill "$i"
        wait "$i" &> /dev/null
    done
}

Execute() {
    local -r CMDS="$1"
    local -r MSG="${2:-$1}"
    local -r TMP_FILE="$(mktemp /tmp/XXXXX)"

    local exitCode=0
    local cmdsPID=""

    # If the current process is ended,
    # also end all its subprocesses.

    SetTrap "EXIT" "KillAllSubprocesses"

    # Execute commands in background
    # shellcheck disable=SC2261

    eval "$CMDS" &> /dev/null 2> "$TMP_FILE" &

    cmdsPID=$!

    # Show a spinner if the commands
    # require more time to complete.

    Spinner "$cmdsPID" "$CMDS" "$MSG"

    # Wait for the commands to no longer be executing
    # in the background, and then get their exit code.

    wait "$cmdsPID" &> /dev/null
    exitCode=$?

    # Print output based on what happened.

    PrintResult $exitCode "$MSG"

    return $exitCode
}

SetTrap() {
    trap -p "$1" | grep "$2" &> /dev/null || trap '$2' "$1"
}

Spinner() {
    local -r FRAMES='/-\|'

    # shellcheck disable=SC2034
    local -r NUMBER_OR_FRAMES=${#FRAMES}

    local -r CMDS="$2"
    local -r MSG="$3"
    local -r PID="$1"

    local i=0
    local frameText=""

    # Note: In order for the Travis CI site to display
    # things correctly, it needs special treatment, hence,
    # the "is Travis CI?" checks.
    if [ "$TRAVIS" != "true" ]; then

        # Provide more space so that the text hopefully
        # doesn't reach the bottom line of the terminal window.
        #
        # This is a workaround for escape sequences not tracking
        # the buffer position (accounting for scrolling).
        #
        # See also: https://unix.stackexchange.com/a/278888
        printf "\n\n\n"
        tput cuu 3
        tput sc
    fi

    # Display spinner while the commands are being executed.
    while kill -0 "$PID" &>/dev/null; do
        frameText="    [${FRAMES:i++%NUMBER_OR_FRAMES:1}] $MSG"

        # Print frame text.
        if [ "$TRAVIS" != "true" ]; then
            printf "%s\n" "$frameText"
        else
            printf "%s" "$frameText"
        fi

        sleep 0.2

        # Clear frame text.
        if [ "$TRAVIS" != "true" ]; then
            tput rc
        else
            printf "\r"
        fi
     done
}

VerifyOS() {
    local OS
    OS="$(. "/etc/os-release" && printf "%s" "$NAME")"

    if [[ $OS != "Fedora Linux" ]]; then
        PrintError "Your operating system '${OS}' is not supported."
        exit 1
    fi
}

Help() {
    printf "%s" "
    Usage: $SCRIPT_NAME [OPTION]

    Options:
    -h, --help                        - Display this help and exit.
    -d, --download                  - Download dotfiles without updating your current configurations.
    -u, --update                     - Update dotfiles.
    "
}

Download() {
    printf "%b" "\n${blue} • Download${normal}\n"
    command -v git &> /dev/null || sudo dnf install -y git &> /dev/null
    Execute "git clone --quiet --recursive $GITHUB_REPOSITORY_URL" "Cloning dotfiles"
}

Update() {
    local tmpDir
    tmpDir="$(mktemp -d)"

    printf "%b" "\n${blue} • Download${normal}\n"
    command -v git &> /dev/null || sudo dnf install -y git &> /dev/null
    Execute "git clone --quiet --recursive $GITHUB_REPOSITORY_URL $tmpDir" "Cloning dotfiles"

    cd "${tmpDir}/" || exit 1

    printf "%b" "\n${blue} • Configuration files${normal}\n"
    Execute "cp -r ./src/.bashrc.d/ $HOME" "Copying src/.bashrc.d/ → $HOME/.bashrc.d/"
    Execute "cp -r ./src/.bash_profile $HOME" "Copying src/.bash_profile → $HOME/.bash_profile"
    Execute "cp -r ./src/.bashrc $HOME" "Copying src/.bashrc → $HOME/.bashrc"

    Execute "cp -r ./src/.gitconfig $HOME" "Copying src/.gitconfig → $HOME/.gitconfig"

    Execute "cp -r ./src/.config/ $HOME" "Copying src/.config/ → $HOME/.config/"
    Execute "cp -r ./src/.local/ $HOME/" "Copying src/.local/ → $HOME/.local/"

    command -v nvim &> /dev/null && nvim +PlugClean +PlugUpdate +qall

    printf "%b" "\n${blue} • Wallpapers${normal}\n"
    for wallpaper in ./src/walls/*.{jpg,jpeg,png};
    do
        wallpaper=${wallpaper##*/}
        Execute "cp -r ./src/walls/${wallpaper} $HOME/Pictures/Wallpapers/${wallpaper}" "Copying src/walls/${wallpaper} → $HOME/Pictures/Wallpapers/${wallpaper}"
    done

    printf "%b" "\n${blue} • Vim Plugins${normal}\n"
    rm -rf "$HOME"/.vim/bundle/Vundle.vim
    Execute "git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim --quiet" "Installing vundle"
    command -v vim &> /dev/null && vim +PluginInstall +qall

    printf "%b" "\n${blue} • Cleanup${normal}\n"
    Execute "rm -rf $tmpDir" "Removing temporary directory"

    printf "%b" "\n${blue} • Done${normal}\n"
}

Main() {
    # Show the header.
    Header

    # Ensure that the following actions
    # are made relative to this file's path.
    cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1

    # Ensure the OS is supported and
    # it's above the required version.
    VerifyOS || exit 1

    if [[ -z "$1" ]]; then
        Help
        exit 1
    fi

    case "${1}" in
        "--help"| "-h") Help;;
        "--download" | "-d") Download;;
        "--update"| "-u") Update;;
        *) Help;;
    esac

}

Main "$@"
