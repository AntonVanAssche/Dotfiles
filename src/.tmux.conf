###############
# Keybindings #
###############

# Set the command key to ` (backtick).
set-option -g prefix `

# Create a new window.
bind-key n new-window

# Split horizontally.
bind-key s split-window -h -c '#{pane_current_path}'

# Split horizontally.
bind-key S split-window -v -c '#{pane_current_path}'

# Move between windows.
bind-key < swap-window -t :-
bind-key > swap-window -t :+
bind-key C-Tab next-window
bind-key C-S-Tab previous-window

# Vim like movement between panes.
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# Rize the pane.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits.
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Better paste buffer choosing.
bind-key b list-buffers  # list paste buffers.
bind-key p paste-buffer  # paste from the top paste buffer.
bind-key P choose-buffer # choose which buffer to paste from.

# Navigate to the last window.
bind-key - last-window

# Go to the last session.
bind-key + switch-client -l

# Rename the current window.
bind-key r command-prompt 'rename-window %%'

# Send through the prefix character.
bind-key ` send-prefix

# Enter copy mode.
bind-key Escape copy-mode
set -sg escape-time 0

# In copy mode:
bind-key -T copy-mode-vi 'v' send -X begin-selection # Vim-like visual selection.
bind-key -Tcopy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle # Rectangular selection.
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'pbcopy' # y to yank (copy).

# Kill the pane.
bind-key Q kill-pane

# Kill the session.
bind-key C-Q kill-session

# Reload the tmux config.
bind-key R source-file ~/.tmux.conf \; display-message "Config reloaded"

# Record commands in this pane>
bind-key C-r pipe-pane -o "cat >>~/#S_#W.log" \; display "Toggled logging to ~/#S_#W.log"

# Toggle sending keystokes to all panes.
bind-key y setw synchronize-panes

# <prefix> m/M to pull/send a pane to another window.
bind-key m command-prompt -p "Send pane to:"  "join-pane -t '%%'"
bind-key M command-prompt -p "Merge pane from:"  "join-pane -s '%%'"

#####################
# Behavioural stuff #
#####################

# Scrollback history.
set-option -g history-limit 10000

# Lower the time before keypresses are sent through.
set -s escape-time 1

# Set windows and panes to index from 1 (it's left-most on the keyboard, it's not an array).
set -g base-index 1
setw -g pane-base-index 1

# Lets use the vi style keys.
set -g mode-keys vi

# Turn on Mouse mode and add mouse scrolling.
set -g mouse on
bind-key -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
bind-key -n WheelDownPane select-pane -t= \;                 send-keys -M

bind-key -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Highlight unfocused windows which have activity.
setw -g monitor-activity on
set -g visual-activity off

# Calm down.
set -g visual-bell off
set -g visual-silence off
set -g bell-action none

# Make XTerm key bindings work, like C-<left> for skipping left 1 word.
set-window-option -g xterm-keys on

# Set Terminal titles where possible.
set-option -g set-titles on
set-option -g set-titles-string '#S: #W'

# Window names displayed.
set-window-option -g window-status-format " #I ‚îÇ #W "
set-window-option -g window-status-current-format " #I ‚îÇ #W "
set-window-option -g window-status-separator " "

# When more than 1 session is attached, resize windows when only when they have multiple viewers
# (the default resizes all windows as soon as the 2nd session attaches)
setw -g aggressive-resize on

set-option -g focus-events on

###########
# Display #
###########

# Make sure tmux knows we have some serious colour power
set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ",*:Tc,*:U8=0"

set -g status-style "fg=#ABB2BF,bg=#282C34"

# Tab styling
set -g window-status-style "fg=#ABB2BF,bg=#61AFEF"
set -g window-status-activity-style "fg=#61AFEF,bg=#282C34,bright"
set -g window-status-current-style "fg=#61AFEF,bg=#282C34"

# Dividing border colours
set -g pane-border-style "fg=#ABB2BF,bg=#282C34"
set -g pane-active-border-style "fg=#ABB2BF,bg=#282C34"

##############
# Status Bar #
##############

set-option -g status on
set-option -g status-position bottom
set-option -g status-interval 3
set-option -g status-justify "centre"

set-option -g status-left "#[fg=#ABB2BF,bg=#282C34,] #S üìÖ  %a %d %y ‚è∞ %l:%M %p #[fg=#98C379,bg=#282C34]"
set-option -g status-left-length 60

set-option -g status-right "#[fg=#98C379,bg=#282C34]#[fg=#E06C75,bg=#282C34,bright] #(~/.config/tmux/hostname.sh #{pane_tty}) #[fg=#E5C07B,bg=#282C34,bright] #(~/.config/tmux/ip.sh #{pane_tty}) #[fg=#C678DD,bg=#282C34,bright] #(~/.config/tmux/battery.sh #{pane_tty})#[bg=#282C34] "
set-option -g status-right-length 140

###########
# Plugins #
###########

run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.config/tmux/plugins/tmux-continuum/continuum.tmux

